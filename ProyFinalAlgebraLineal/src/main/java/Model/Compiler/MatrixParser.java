
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Model.Compiler;

import java_cup.runtime.*;
import java.util.ArrayList;
import Model.Matrix.Matrix;
import Model.Utils.CustomLogger;
import Domain.Markov.MarkovData;
import Domain.AVL.NodeAVLBuilder;
import Domain.AVL.NodeAVL;
import Domain.Vector.GraphVector;
import Domain.Vector.GraphVectorBuilder;
import Domain.Vector.NodeVector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MatrixParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MatrixParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MatrixParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MatrixParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\010\000\002\005\005\000\002\005\003\000" +
    "\002\006\004\000\002\006\003\000\002\007\004\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\005\000\002\012\005\000\002" +
    "\013\005\000\002\014\005\000\002\015\005\000\002\016" +
    "\005\000\002\017\005\000\002\020\005\000\002\026\005" +
    "\000\002\026\003\000\002\030\004\000\002\030\003\000" +
    "\002\027\007\000\002\027\005\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\023" +
    "\003\000\002\023\005\000\002\023\005\000\002\024\003" +
    "\000\002\024\005\000\002\025\003\000\002\025\003\000" +
    "\002\031\005\000\002\032\003\000\002\032\005\000\002" +
    "\033\005\000\002\035\004\000\002\035\003\000\002\035" +
    "\004\000\002\035\005\000\002\034\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\006\003\006\016\005\001\002\000\004\002" +
    "\153\001\002\000\004\030\141\001\002\000\004\015\140" +
    "\001\002\000\030\002\uffff\017\030\020\016\021\022\022" +
    "\014\023\017\024\012\025\036\026\034\027\015\034\025" +
    "\001\002\000\034\002\ufffd\003\006\016\005\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\034\ufffd\001\002\000\030\002\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\034\ufffe\001\002\000\004\031\135\001\002\000" +
    "\030\002\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\034\ufff0\001\002\000" +
    "\004\030\041\001\002\000\004\030\124\001\002\000\004" +
    "\030\041\001\002\000\004\033\117\001\002\000\030\002" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\034\uffee\001\002\000\030\002" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\034\ufff4\001\002\000\004\030" +
    "\041\001\002\000\030\002\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\034" +
    "\ufff3\001\002\000\004\002\000\001\002\000\004\030\074" +
    "\001\002\000\030\002\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\034\ufff2" +
    "\001\002\000\030\002\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\034\uffeb" +
    "\001\002\000\010\006\054\030\053\031\052\001\002\000" +
    "\030\002\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\034\uffed\001\002\000" +
    "\030\002\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\034\uffec\001\002\000" +
    "\030\002\ufff5\017\030\020\016\021\022\022\014\023\017" +
    "\024\012\025\036\026\034\027\015\034\025\001\002\000" +
    "\004\030\041\001\002\000\030\002\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\034\ufff1\001\002\000\004\030\041\001\002\000\030" +
    "\002\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\034\uffef\001\002\000\004" +
    "\015\044\001\002\000\006\014\042\015\uffe1\001\002\000" +
    "\004\030\041\001\002\000\004\015\uffe2\001\002\000\030" +
    "\002\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\034\uffe5\001\002\000\004" +
    "\015\046\001\002\000\030\002\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\034\uffe4\001\002\000\004\002\ufff6\001\002\000\016\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\001\002" +
    "\000\016\007\uffdb\010\uffdb\011\064\012\uffdb\013\063\015" +
    "\uffdb\001\002\000\016\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\015\uffd3\001\002\000\016\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\015\uffd2\001\002\000\010\006\054" +
    "\030\053\031\052\001\002\000\016\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\015\uffd8\001\002\000\010\010\060" +
    "\012\061\015\057\001\002\000\030\002\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\034\uffdc\001\002\000\010\006\054\030\053\031" +
    "\052\001\002\000\010\006\054\030\053\031\052\001\002" +
    "\000\016\007\uffd9\010\uffd9\011\064\012\uffd9\013\063\015" +
    "\uffd9\001\002\000\010\006\054\030\053\031\052\001\002" +
    "\000\010\006\054\030\053\031\052\001\002\000\016\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\001\002" +
    "\000\016\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015" +
    "\uffd6\001\002\000\016\007\uffda\010\uffda\011\064\012\uffda" +
    "\013\063\015\uffda\001\002\000\010\007\071\010\060\012" +
    "\061\001\002\000\016\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\015\uffd4\001\002\000\004\015\114\001\002\000" +
    "\006\014\112\015\uffd0\001\002\000\004\035\075\001\002" +
    "\000\006\006\100\031\077\001\002\000\006\014\uffce\015" +
    "\uffce\001\002\000\004\031\111\001\002\000\004\031\105" +
    "\001\002\000\012\006\100\014\uffcc\015\uffcc\031\102\001" +
    "\002\000\004\031\104\001\002\000\006\014\uffcb\015\uffcb" +
    "\001\002\000\006\014\uffca\015\uffca\001\002\000\004\014" +
    "\106\001\002\000\004\031\107\001\002\000\004\007\110" +
    "\001\002\000\012\006\uffc9\014\uffc9\015\uffc9\031\uffc9\001" +
    "\002\000\006\014\uffcd\015\uffcd\001\002\000\004\030\074" +
    "\001\002\000\004\015\uffcf\001\002\000\030\002\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\034\uffd1\001\002\000\004\015\116\001" +
    "\002\000\030\002\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\034\uffe9\001" +
    "\002\000\004\015\120\001\002\000\030\002\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\034\uffe7\001\002\000\004\015\122\001\002" +
    "\000\030\002\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\034\uffea\001\002" +
    "\000\004\015\131\001\002\000\004\030\125\001\002\000" +
    "\004\031\126\001\002\000\006\014\127\015\uffdd\001\002" +
    "\000\004\030\124\001\002\000\004\015\uffde\001\002\000" +
    "\030\002\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\034\uffe3\001\002\000" +
    "\004\015\133\001\002\000\030\002\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\034\uffe8\001\002\000\004\015\137\001\002\000\006" +
    "\015\uffdf\031\135\001\002\000\004\015\uffe0\001\002\000" +
    "\030\002\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\034\uffe6\001\002\000" +
    "\030\002\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\034\ufffc\001\002\000" +
    "\004\004\142\001\002\000\004\031\144\001\002\000\006" +
    "\005\150\014\147\001\002\000\010\005\ufff7\014\ufff7\031" +
    "\ufff7\001\002\000\010\005\ufff9\014\ufff9\031\146\001\002" +
    "\000\010\005\ufff8\014\ufff8\031\ufff8\001\002\000\004\031" +
    "\144\001\002\000\004\015\151\001\002\000\034\002\ufffb" +
    "\003\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\034\ufffb\001\002" +
    "\000\010\005\ufffa\014\ufffa\031\146\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\010\002\003\003\006\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\023\010\032\011\020\012\022\013\025\014\034\015" +
    "\012\016\036\017\017\020\030\021\031\031\026\001\001" +
    "\000\006\003\010\004\007\001\001\000\002\001\001\000" +
    "\004\030\133\001\001\000\002\001\001\000\004\026\131" +
    "\001\001\000\004\027\122\001\001\000\004\026\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\071\033\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\055\023\050\024\054\025" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\046\010\032\011\020\012\022\013\025\014\034\015" +
    "\012\016\036\017\017\020\030\021\031\031\026\001\001" +
    "\000\004\026\044\001\001\000\002\001\001\000\004\026" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\067\023\050\024\054" +
    "\025\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\066\024\054\025\047\001\001" +
    "\000\010\023\061\024\054\025\047\001\001\000\002\001" +
    "\001\000\006\024\065\025\047\001\001\000\006\024\064" +
    "\025\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\100\035\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\112\033\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\142\006\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MatrixParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MatrixParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MatrixParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ParserUtils parserUtils;
    public ParserController parserController;

    // constructor
    public MatrixParser(MatrixLexer lexer) {
        super(lexer);
        this.parserController = new ParserController(new ParserModel());
        this.parserUtils = ParserUtils.getInstance();
    }

    // error methods
    public void report_error(String message, Object info) {
        CustomLogger.getInstance().addLog("Error at parser with provided syntax", true);
    }
    
    public void report_fatal_error(String message, Object info) {
        CustomLogger.getInstance().addLog("Unable to recover fatal error", true);
    }

    public void syntax_error(Symbol cur_token) {
        try {
            // Get line and column information from the Symbol
            int line = cur_token.left; // Adjust to 1-indexed
            int column = cur_token.right; // Adjust to 1-indexed

            // save error to be shown
            ArrayList<String> expectedTkns = new ArrayList<>();
            expected_token_ids().forEach(symT -> {
                expectedTkns.add(sym.terminalNames[symT]);
            });
            String value = cur_token.value  != null? cur_token.value.toString(): "NA";
            CustomLogger.getInstance().addLog(String.format("SYNTAX ERROR Line(%1$d) Column(%2$d), expected tokens must be %3$s", line, column,  expectedTkns), true);

        } catch (Exception e) {
            CustomLogger.getInstance().addLog("unable to save error at matrix parser " + e.getMessage(), true);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        CustomLogger.getInstance().addLog("unrecovered sintax error", true);
    }   

    public ParserModel getParserModel() {
        return this.parserController.getModel();
    }

    /**
     * Execute the solve of all pools of instructions
     * @param verbose true or false to print step by step
     */
    public void solve(boolean verbose) {
        this.parserController.solve(verbose);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MatrixParser$actions {
  private final MatrixParser parser;

  /** Constructor */
  CUP$MatrixParser$actions(MatrixParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MatrixParser$do_action_part00000000(
    int                        CUP$MatrixParser$act_num,
    java_cup.runtime.lr_parser CUP$MatrixParser$parser,
    java.util.Stack            CUP$MatrixParser$stack,
    int                        CUP$MatrixParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MatrixParser$result;

      /* select the action based on the action number */
      switch (CUP$MatrixParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		RESULT = start_val;
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MatrixParser$parser.done_parsing();
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= matrices_declaration operations_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= matrices_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // matrices_declaration ::= matrix_declaration matrices_declaration 
            {
              Object RESULT =null;
		int newMatrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int newMatrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object newMatrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		 parserController.saveMatrix((Matrix) newMatrix); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("matrices_declaration",1, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // matrices_declaration ::= matrix_declaration 
            {
              Object RESULT =null;
		int newMatrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int newMatrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object newMatrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		 parserController.saveMatrix((Matrix) newMatrix); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("matrices_declaration",1, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // matrices_declaration ::= error SEMI_COLON 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("matrices_declaration",1, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // matrix_declaration ::= MATRIX IDENTIFIER LBRACKET matrix_definition RBRACKET SEMI_COLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)).value;
		int defined_matrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int defined_matrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object defined_matrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		 RESULT = parserUtils.configureFinalMatrix((String) id, (Matrix) defined_matrix); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("matrix_declaration",2, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-5)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // matrix_definition ::= matrix_definition COMMA vector_array 
            {
              Object RESULT =null;
		int child_matrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int child_matrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object child_matrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int parent_matrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int parent_matrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object parent_matrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		  RESULT = parserUtils.concatMatrix((Matrix) child_matrix, (ArrayList<Double>) parent_matrix ); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("matrix_definition",3, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // matrix_definition ::= vector_array 
            {
              Object RESULT =null;
		int parent_matrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int parent_matrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object parent_matrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		  RESULT = parserUtils.generateMainMatrix((ArrayList<Double>) parent_matrix); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("matrix_definition",3, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vector_array ::= vector_array NUMBER 
            {
              Object RESULT =null;
		int num_vectorleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int num_vectorright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object num_vector = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		  RESULT = parserUtils.concatDoublesVector((ArrayList<Double>) num_vector, Double.parseDouble((String)num));  
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_array",4, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vector_array ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		  RESULT = parserUtils.concatDoublesVector(null,  Double.parseDouble((String)num));  
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_array",4, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operations_declaration ::= operation_declaration operations_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operations_declaration",5, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operations_declaration ::= operation_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operations_declaration",5, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operation_declaration ::= inverse_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operation_declaration ::= determinant_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operation_declaration ::= rank_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operation_declaration ::= encrypt_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operation_declaration ::= decrypt_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation_declaration ::= gauss_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation_declaration ::= gjordan_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation_declaration ::= markov_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation_declaration ::= arith_declaration 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation_declaration ::= vector_declaration 
            {
              Object RESULT =null;

              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("operation_declaration",6, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inverse_declaration ::= INVERSE ids_declaration SEMI_COLON 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveInStringHashmap(CommonParserHashKey.INVERSE, (ArrayList<String>) ids);   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("inverse_declaration",7, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // determinant_declaration ::= DETERMINANT ids_declaration SEMI_COLON 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveInStringHashmap(CommonParserHashKey.DETERMINANT, (ArrayList<String>) ids);   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("determinant_declaration",8, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rank_declaration ::= RANK ids_declaration SEMI_COLON 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveInStringHashmap(CommonParserHashKey.RANK, (ArrayList<String>) ids);   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("rank_declaration",9, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // encrypt_declaration ::= ENCRYPT STRING SEMI_COLON 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   ArrayList<String> tmpValues = new ArrayList<>();
                                                                                                 tmpValues.add(parserUtils.removeComillasToString((String) string));
                                                                                                 parserController.saveInStringHashmap(CommonParserHashKey.ENCRYPT, tmpValues);
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("encrypt_declaration",10, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decrypt_declaration ::= DECRYPT numbers_vector SEMI_COLON 
            {
              Object RESULT =null;
		int numbersleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int numbersright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object numbers = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveDecrypts((ArrayList<Double>) numbers);   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("decrypt_declaration",11, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gauss_declaration ::= GAUSS ids_declaration SEMI_COLON 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveInStringHashmap(CommonParserHashKey.GAUSS, (ArrayList<String>) ids);   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("gauss_declaration",12, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gjordan_declaration ::= JORDAN ids_declaration SEMI_COLON 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveInStringHashmap(CommonParserHashKey.JORDAN, (ArrayList<String>) ids);   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("gjordan_declaration",13, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // markov_declaration ::= MARKOV markov_ids_declaration SEMI_COLON 
            {
              Object RESULT =null;
		int markov_nodesleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int markov_nodesright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object markov_nodes = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveInStringHashmap(CommonParserHashKey.MARKOV, (ArrayList<MarkovData>) markov_nodes );  
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("markov_declaration",14, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ids_declaration ::= IDENTIFIER COMMA ids_declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   ArrayList<String> mergeIds = new ArrayList<>() {{ add((String) id); }};
                                                                                                  mergeIds.addAll((ArrayList<String>) ids);
                                                                                                  RESULT = mergeIds;
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("ids_declaration",20, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ids_declaration ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   ArrayList<String> ids = new ArrayList<>(){{ add((String) id); }};
                                                                                                  RESULT = ids;
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("ids_declaration",20, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numbers_vector ::= NUMBER numbers_vector 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		int numbersleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int numbersright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object numbers = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   ArrayList<Double> mergeNums = new ArrayList<>() {{ add(Double.parseDouble(num.toString())); }};
                                                                                                  mergeNums.addAll((ArrayList<Double>) numbers);
                                                                                                  RESULT = mergeNums;
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("numbers_vector",22, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numbers_vector ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   ArrayList<Double> numbers = new ArrayList<>(){{ add(Double.parseDouble(num.toString())); }};
                                                                                                  RESULT = numbers;
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("numbers_vector",22, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // markov_ids_declaration ::= IDENTIFIER IDENTIFIER NUMBER COMMA markov_ids_declaration 
            {
              Object RESULT =null;
		int matrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)).left;
		int matrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)).right;
		Object matrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)).value;
		int statusleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-3)).left;
		int statusright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-3)).right;
		Object status = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-3)).value;
		int iterationsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int iterationsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object iterations = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int markov_vectorleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int markov_vectorright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object markov_vector = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		  ArrayList<MarkovData> newData = new ArrayList<>() {{ add(new MarkovData((String) matrix, (String) status, Integer.parseInt((String) iterations))); }};
                                                                                                 newData.addAll((ArrayList<MarkovData>) markov_vector);
                                                                                                 RESULT = newData;
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("markov_ids_declaration",21, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // markov_ids_declaration ::= IDENTIFIER IDENTIFIER NUMBER 
            {
              Object RESULT =null;
		int matrixleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int matrixright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object matrix = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int statusleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int statusright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object status = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		int iterationsleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int iterationsright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object iterations = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		  RESULT = new ArrayList<MarkovData>() {{ add(new MarkovData((String) matrix, (String) status, Integer.parseInt((String) iterations))); }};    
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("markov_ids_declaration",21, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arith_declaration ::= ARITH arith_expression SEMI_COLON 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveInStringHashmap(CommonParserHashKey.ARITH_MATRIX, new ArrayList<NodeAVL>() {{ add((NodeAVL) expression); }});   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_declaration",15, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arith_expression ::= arith_term 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = expression;   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_expression",16, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arith_expression ::= arith_expression PLUS arith_term 
            {
              Object RESULT =null;
		int lchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int lchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object lchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int rchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int rchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object rchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = parserUtils.generateNewNode((Object) "+", (NodeAVL) lchild, (NodeAVL) rchild);    
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_expression",16, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arith_expression ::= arith_expression MINUS arith_term 
            {
              Object RESULT =null;
		int lchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int lchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object lchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int rchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int rchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object rchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = parserUtils.generateNewNode((Object) "-", (NodeAVL) lchild, (NodeAVL) rchild);    
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_expression",16, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arith_term ::= arith_factor 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = expression;   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_term",17, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arith_term ::= arith_term TIMES arith_factor 
            {
              Object RESULT =null;
		int lchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int lchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object lchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int rchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int rchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object rchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = parserUtils.generateNewNode((Object) "*", (NodeAVL) lchild, (NodeAVL) rchild);    
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_term",17, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arith_term ::= arith_term DIVIDE arith_factor 
            {
              Object RESULT =null;
		int lchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int lchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object lchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int rchildleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int rchildright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object rchild = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = parserUtils.generateNewNode((Object) "/", (NodeAVL) lchild, (NodeAVL) rchild);    
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_term",17, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arith_factor ::= arith_primary 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = expression;   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_factor",18, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arith_factor ::= LPARENTHESIS arith_expression RPARENTHESIS 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   RESULT = parserUtils.generateNewNode((Object) "()", (NodeAVL) expression);    
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_factor",18, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arith_primary ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = new NodeAVLBuilder<Double>().setData(Double.parseDouble((String) num)).build(); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_primary",19, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arith_primary ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = new NodeAVLBuilder<String>().setData((String) id).build();   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("arith_primary",19, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vector_declaration ::= VECTOR vector_definition SEMI_COLON 
            {
              Object RESULT =null;
		int vectors_declarationleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int vectors_declarationright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object vectors_declaration = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		   parserController.saveVector((ArrayList<GraphVector>) vectors_declaration);   
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_declaration",23, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // vector_definition ::= vector_creation 
            {
              Object RESULT =null;
		int new_vectorleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int new_vectorright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object new_vector = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = new ArrayList<GraphVector>() {{ add((GraphVector) new_vector ); }};  
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_definition",24, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vector_definition ::= vector_creation COMMA vector_definition 
            {
              Object RESULT =null;
		int new_vectorleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int new_vectorright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object new_vector = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int vector_arrayleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int vector_arrayright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object vector_array = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		   RESULT = parserUtils.appendVector(new ArrayList<GraphVector>() {{ add((GraphVector) new_vector); }}, (ArrayList<GraphVector>) vector_array);  
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_definition",24, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vector_creation ::= IDENTIFIER COLON vector_decl 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int vector_builderleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int vector_builderright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object vector_builder = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		  RESULT = ((GraphVectorBuilder)vector_builder).setName(id.toString()).build(); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_creation",25, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vector_decl ::= NUMBER NUMBER 
            {
              Object RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object len = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		int angleleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int angleright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object angle = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		 RESULT = new GraphVectorBuilder()
                                                                                                             .setLength(Double.parseDouble(len.toString()))
                                                                                                             .setAngle(Double.parseDouble(angle.toString()));
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_decl",27, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vector_decl ::= vector_node 
            {
              Object RESULT =null;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object destination = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		 RESULT = new GraphVectorBuilder()
                                                                                                             .setOriginPoint(new NodeVector(0,0))
                                                                                                             .setEndPoint((NodeVector) destination);
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_decl",27, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vector_decl ::= vector_node vector_node 
            {
              Object RESULT =null;
		int originleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int originright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object origin = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object destination = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		 RESULT = new GraphVectorBuilder()
                                                                                                            .setOriginPoint((NodeVector) origin)
                                                                                                            .setEndPoint((NodeVector) destination);
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_decl",27, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vector_decl ::= vector_node NUMBER NUMBER 
            {
              Object RESULT =null;
		int originleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).left;
		int originright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).right;
		Object origin = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object len = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		int angleleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).left;
		int angleright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()).right;
		Object angle = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.peek()).value;
		 RESULT = new GraphVectorBuilder()
                                                                                                            .setOriginPoint((NodeVector) origin)
                                                                                                            .setLength(Double.parseDouble(len.toString()))
                                                                                                            .setAngle(Double.parseDouble(angle.toString()));
                                                                                             
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_decl",27, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vector_node ::= LPARENTHESIS NUMBER COMMA NUMBER RPARENTHESIS 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-1)).value;
		 RESULT = new NodeVector(Double.parseDouble(x.toString()), Double.parseDouble(y.toString())); 
              CUP$MatrixParser$result = parser.getSymbolFactory().newSymbol("vector_node",26, ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.elementAt(CUP$MatrixParser$top-4)), ((java_cup.runtime.Symbol)CUP$MatrixParser$stack.peek()), RESULT);
            }
          return CUP$MatrixParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MatrixParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MatrixParser$do_action(
    int                        CUP$MatrixParser$act_num,
    java_cup.runtime.lr_parser CUP$MatrixParser$parser,
    java.util.Stack            CUP$MatrixParser$stack,
    int                        CUP$MatrixParser$top)
    throws java.lang.Exception
    {
              return CUP$MatrixParser$do_action_part00000000(
                               CUP$MatrixParser$act_num,
                               CUP$MatrixParser$parser,
                               CUP$MatrixParser$stack,
                               CUP$MatrixParser$top);
    }
}

}
